export default {
    product: {
        name: 'MidiMaker',
        description: `# MidiMaker.pro - Project Documentation

**MidiMaker** is a project focused on generating MIDI music compositions from textual descriptions
leveraging the power of Large Language Models (LLMs). It addresses the challenge of maintaining
musical coherence and structure in longer generated pieces by employing a sectional generation
strategy and a robust backend processing pipeline.

![](/public/image.jpg)

The core concept involves:

1.  **Translating Ideas:** Converting high-level musical concepts (e.g., "a fast, optimistic
    electronic piece") into a structured plan, potentially using an LLM for enrichment and parameter
    suggestion (tempo, key, instruments).
2.  **Symbolic Representation:** Using a custom, compact text-based format to represent musical
    events (notes, chords, rests, tempo, etc.). This format is designed to be easily generated by
    LLMs and parsed by software.
3.  **Sectional Generation:** Breaking down the music generation process into distinct sections
    (e.g., Intro, Verse, Chorus). Each section can be generated individually or sequentially,
    focusing on specific goals and maintaining context.
4.  **Robust Backend Processing:** Parsing the concatenated symbolic text representation using a
    dedicated parser and synthesizing it into a standard MIDI (\`.mid\`) file. This crucial step is
    handled by a Python backend for efficient music data processing.
5.  **Web Interface & Visualization:** Providing a user interface (built with React) for users to
    input descriptions, manage the generation process, view, and listen to the generated music, with


The project aims to explore the potential of LLMs in creative musical tasks while providing a
practical web-based pipeline for generating, managing, and experiencing structured musical outputs,
enhanced by dedicated music processing logic.


`,
        advantages: [
            'Generate music from text descriptions',
            'Leverage LLMs for creative music generation',
            'Interactive web interface for creation and playback',
            'Structured sectional music generation',
            'Simple, accessible web platform for music creation'
        ]
    },
    mainSubreddit: 'midi',
    targetSubreddits: [
        'midi',
        'musictheory',
        'edmproduction',
        'synthesizers',
        'wearethemusicmakers',
        'ableton',
        'FL_Studio',
        'Logic_Studio',
        'musicproduction',
        'aicomposition',
        'generativemusic',
        'audioengineering',
        'vsts',
        'daws',
        'musictechnology',
        'artificialintelligence',
        'machinelearning',
        'llm',
        'creativecoding'
    ],
    keywordsToTrack: [
        'MIDI generation',
        'AI music creation',
        'LLM music',
        'text to music',
        'algorithmic composition',
        'music tech',
        'synthesizer MIDI',
        'DAW MIDI',
        'generative music',
        'music AI',
        'create music with AI',
        'music composition software'
    ],
    keywordsToInject: [
        'MidiMaker',
        'AI Music Generator',
        'Text-to-MIDI',
        'Algorithmic Composition Tool',
        'MidiMaker.pro'
    ],
    postSchedule: {
        cron: '0 23 * * *'
    },
    interactionLimits: {
        maxCommentsPerHour: 10,
        maxPostsPerDay: 5,
        minTimeBetweenComments: 600
    },
    contentGeneration: {
        minLength: 100,
        maxLength: 500,
        useKeywords: true,
        keywordDensity: 0.02
    },
    apiConfig: {
        baseUrl: 'https://oauth.reddit.com',
        version: 'v1',
        userAgent:
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'
    },
    errorHandling: {
        maxRetries: 3,
        retryDelay: 1000
    },
    logging: {
        level: 'info',
        format: 'json',
        filename: 'promo-agent.log'
    },
    analytics: {
        trackEngagement: true,
        trackPerformance: true,
        dashboardUrl: 'http://localhost:3000/dashboard'
    },
    security: {
        tokenRefreshInterval: 1003600000
    },
    features: {
        postInteraction: true,
        contentCreation: true,
        scheduling: true,
        rateLimit: true,
        errorHandling: true,
        contentPersonalization: true,
        analytics: true,
        authentication: true,
        logging: true,
        aiDrivenOptimization: true
    },
    plugins: [],
    claudeConfig: {
        model: 'claude-3-5-sonnet-20241022',
        maxTokens: 350,
        temperature: 0.9
    },
    contentScoring: {
        enabled: true,
        minScore: 0.7
    },
    retryMechanism: {
        enabled: true,
        maxAttempts: 3,
        initialDelay: 1000,
        backoffFactor: 2
    },
    caching: {
        enabled: true,
        ttl: 3600
    },
    internationalization: {
        enabled: false,
        defaultLanguage: 'en',
        supportedLanguages: ['en']
    },
    collaboration: {
        enabled: false,
        workflowApproval: false
    },
    performanceOptimization: {
        caching: true,
        databaseIndexing: true
    },
    ethicalAI: {
        transparencyEnabled: true,
        responsibleContentGuidelines: true
    },
    nlp: {
        enabled: false,
        sentimentAnalysis: false
    },
    machineLearning: {
        enabled: false,
        optimizePostingTimes: false,
        recommendRelevantDiscussions: false
    },
    multiPlatformSupport: {
        enabled: false,
        platforms: []
    },
    userInteraction: {
        respondToComments: false,
        handleMessages: false,
        chatbot: false
    },
    contentCuration: {
        aggregateIndustryNews: false,
        communityVoting: false
    },
    developerTools: {
        idePlugins: false,
        cliTool: false
    }
};
